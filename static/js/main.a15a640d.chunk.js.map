{"version":3,"sources":["components/autoCompleteField/AutoCompleteListItem.jsx","components/autoCompleteField/AutoCompleteList.jsx","components/pills/Pill.jsx","components/pills/Pills.jsx","components/userList/User.jsx","components/userList/UsersList.jsx","config.js","hooks/useHint.js","App.js","reportWebVitals.js","index.js"],"names":["AutoCompleteListItem","props","className","onClick","onClickHint","user","name","AutoCompleteList","usersHints","map","guid","Pill","onClickSelectedUser","Pills","console","log","selectedUsers","React","memo","User","src","picture","alt","gender","email","UsersList","config","userDataPath","baseUrl","process","useHint","useState","setUsersHint","enteredText","usersData","trim","hints","filter","RegExp","test","find","selectedUser","App","setUsersData","setSelectedUsers","hintsDispay","setHintsDisplay","inputRef","useRef","setUsersHints","fetchUsersData","a","axios","get","response","status","data","useEffect","changeHandler","debounce","e","target","value","createHintList","removeFromListHandler","useCallback","newSelectedUsers","type","placeholder","id","onChange","ref","length","users","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAaeA,MAXf,SAA8BC,GAC5B,OACE,oBACEC,UAAU,kBACVC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,OAFzC,SAIGJ,EAAMI,KAAKC,Q,MCcHC,MAlBf,SAA0BN,GACxB,OACE,qBAAKC,UAAU,6BAAf,SACE,oBAAIA,UAAU,gCAAd,SACGD,EAAMO,WAAWC,KAAI,SAACJ,GACrB,OACE,cAAC,EAAD,CAEEA,KAAMA,EACND,YAAaH,EAAMG,aAFdC,EAAKK,cCOTC,MAhBf,SAAcV,GACZ,OACE,mCACE,sBAAKC,UAAU,0CAAf,UACE,+BAAOD,EAAMI,KAAKC,OAClB,sBACEJ,UAAU,aACVC,QAAS,kBAAMF,EAAMW,oBAAoBX,EAAMI,OAFjD,qB,MCHR,SAASQ,EAAMZ,GAEb,OADAa,QAAQC,IAAI,gBAEV,qBAAKb,UAAU,eAAf,SACGD,EAAMe,cAAcP,KAAI,SAACJ,GACxB,OACE,cAAC,EAAD,CAEEA,KAAMA,EACNO,oBAAqBX,EAAMW,qBAFtBP,EAAKK,WAUPO,UAAMC,KAAKL,GCLXM,MAdf,SAAclB,GACZ,IAAQI,EAASJ,EAATI,KACR,OACE,+BACE,6BACE,qBAAKe,IAAKf,EAAKgB,QAASC,IAAI,OAE9B,6BAAKjB,EAAKC,OACV,6BAAKD,EAAKkB,SACV,6BAAKlB,EAAKmB,YCRhB,SAASC,EAAUxB,GAEjB,OADAa,QAAQC,IAAI,gBAEV,wBAAOb,UAAU,iBAAjB,UACE,gCACE,+BACE,yCACA,sCACA,qCACA,4CAGJ,gCACGD,EAAMe,cAAcP,KAAI,SAACJ,GACxB,OAAO,cAAC,EAAD,CAAsBA,KAAMA,GAAjBA,EAAKK,cAOlBO,UAAMC,KAAKO,GCnBXC,EALA,CACbC,aAAc,kBACdC,QAASC,iB,iCCwBIC,EAxBC,WACd,MAAmCC,mBAAS,IAA5C,mBAAOvB,EAAP,KAAmBwB,EAAnB,KAoBA,MAAO,CAACxB,EAlBe,SAACyB,EAAaC,EAAWlB,GAC9C,GAA2B,KAAvBiB,EAAYE,OACdH,EAAa,QACR,CACL,IAAMI,EAAQF,EAAUG,QAAO,SAAChC,GAE9B,GADgB,IAAIiC,OAAOL,EAAa,KAC5BM,KAAKlC,EAAKC,MAKpB,OAH4BU,EAAcwB,MAAK,SAACC,GAC9C,OAAOA,EAAa/B,OAASL,EAAKK,WAKxCsB,EAAaI,OCmFJM,MA3Ff,WACE,MAAkCX,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBS,EAAlB,KACA,EAA0CZ,mBAAS,IAAnD,mBAAOf,EAAP,KAAsB4B,EAAtB,KACA,EAAuCb,oBAAS,GAAhD,mBAAOc,EAAP,KAAoBC,EAApB,KACMC,EAAWC,mBACjB,EAAoClB,IAApC,mBAAOtB,EAAP,KAAmByC,EAAnB,KAEMC,EAAc,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,UAClB3B,EAAOE,QADW,YACAF,EAAOC,eAFT,UAIG,OAHlB2B,EADe,QAIRC,OAJQ,yCAKZD,EAASE,MALG,2CAAH,qDASpBC,oBAAS,sBAAC,4BAAAN,EAAA,sEACWD,IADX,OACFM,EADE,OAERb,EAAaa,GAFL,2CAGP,IAEH,IAWME,EAAgBC,oBAAS,SAACC,GAAD,OAXR,SAACA,GACtB,IAAM3B,EAAc2B,EAAEC,OAAOC,MAE7Bb,EAAchB,EAAaC,EAAWlB,GACtC8B,GAAgB,GAOoBiB,CAAeH,KAAI,KAgBnDI,EAAwBC,uBAC5B,SAAC5D,GACC,IAAM6D,EAAmBlD,EAAcqB,QACrC,SAACI,GAAD,OAAkBA,EAAa/B,OAASL,EAAKK,QAE/CkC,EAAiBsB,KAEnB,CAAClD,IAGH,OACE,iCACE,sBAAMd,UAAU,cAAhB,SACE,uBACEA,UAAU,eACViE,KAAK,OACL7D,KAAK,GACL8D,YAAY,eACZC,GAAG,GACHC,SAAUZ,EACVa,IAAKxB,MAGRvC,EAAWgE,OAAS,GAAK3B,GACxB,cAAC,EAAD,CACErC,WAAYA,EACZJ,YApCiB,SAACC,GACxB,IAAMoE,EAAK,sBAAOzD,GAAP,CAAsBX,IACjCuC,EAAiB6B,GACjB3B,GAAgB,GAChBC,EAAS2B,QAAQZ,MAAQ,MAoCtB9C,EAAcwD,OAAS,GACtB,cAAC,EAAD,CACExD,cAAeA,EACfJ,oBAAqBoD,IAGxBhD,EAAcwD,OAAS,GACtB,cAAC,EAAD,CAAWxD,cAAeA,QCpFnB2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a15a640d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction AutoCompleteListItem(props) {\r\n  return (\r\n    <li\r\n      className=\"list-group-item\"\r\n      onClick={() => props.onClickHint(props.user)}\r\n    >\r\n      {props.user.name}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default AutoCompleteListItem;\r\n","import React from \"react\";\r\nimport AutoCompleteListItem from \"./AutoCompleteListItem\";\r\nimport \"./style.css\";\r\n\r\nfunction AutoCompleteList(props) {\r\n  return (\r\n    <div className=\"auto-complete-list-wrapper\">\r\n      <ul className=\"list-group auto-complete-list\">\r\n        {props.usersHints.map((user) => {\r\n          return (\r\n            <AutoCompleteListItem\r\n              key={user.guid}\r\n              user={user}\r\n              onClickHint={props.onClickHint}\r\n            ></AutoCompleteListItem>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AutoCompleteList;\r\n","import React from \"react\";\r\n\r\nfunction Pill(props) {\r\n  return (\r\n    <>\r\n      <div className=\"pill badge badge-pill badge-primary m-2\">\r\n        <span>{props.user.name}</span>\r\n        <span\r\n          className=\"pill-close\"\r\n          onClick={() => props.onClickSelectedUser(props.user)}\r\n        >\r\n          X\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Pill;\r\n","import React from \"react\";\r\nimport Pill from \"./Pill\";\r\nimport \"./style.css\";\r\n\r\nfunction Pills(props) {\r\n  console.log(\"......pillls\");\r\n  return (\r\n    <div className=\"pill-wrapper\">\r\n      {props.selectedUsers.map((user) => {\r\n        return (\r\n          <Pill\r\n            key={user.guid}\r\n            user={user}\r\n            onClickSelectedUser={props.onClickSelectedUser}\r\n          ></Pill>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Pills);\r\n","import React from \"react\";\r\n\r\nfunction User(props) {\r\n  const { user } = props;\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <img src={user.picture} alt=\"\" />\r\n      </td>\r\n      <td>{user.name}</td>\r\n      <td>{user.gender}</td>\r\n      <td>{user.email}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport User from \"./User\";\r\n\r\nfunction UsersList(props) {\r\n  console.log(\"user........\");\r\n  return (\r\n    <table className=\"table userlist\">\r\n      <thead>\r\n        <tr>\r\n          <th>Picture</th>\r\n          <th>Name</th>\r\n          <th>Sex</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.selectedUsers.map((user) => {\r\n          return <User key={user.guid} user={user}></User>;\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default React.memo(UsersList);\r\n","const config = {\r\n  userDataPath: \"data/Users.json\",\r\n  baseUrl: process.env.PUBLIC_URL,\r\n};\r\n\r\nexport default config;\r\n","import React, { useState } from \"react\";\r\n\r\nconst useHint = () => {\r\n  const [usersHints, setUsersHint] = useState([]);\r\n\r\n  const createHintList = (enteredText, usersData, selectedUsers) => {\r\n    if (enteredText.trim() === \"\") {\r\n      setUsersHint([]);\r\n    } else {\r\n      const hints = usersData.filter((user) => {\r\n        const pattern = new RegExp(enteredText, \"i\");\r\n        if (pattern.test(user.name)) {\r\n          //do not add user in hint list if user already exist in selected user list\r\n          const alreadySelectedUser = selectedUsers.find((selectedUser) => {\r\n            return selectedUser.guid === user.guid;\r\n          });\r\n          return !alreadySelectedUser;\r\n        }\r\n      });\r\n      setUsersHint(hints);\r\n    }\r\n  };\r\n\r\n  return [usersHints, createHintList];\r\n};\r\n\r\nexport default useHint;\r\n","import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport AutoCompleteList from \"./components/autoCompleteField\";\r\nimport Pills from \"./components/pills\";\r\nimport UsersList from \"./components/userList\";\r\nimport config from \"./config\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n//import { debounce } from \"./utils/Utils\";\r\nimport { debounce } from \"lodash\";\r\nimport useHint from \"./hooks/useHint\";\r\n\r\nfunction App() {\r\n  const [usersData, setUsersData] = useState([]);\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [hintsDispay, setHintsDisplay] = useState(true);\r\n  const inputRef = useRef();\r\n  const [usersHints, setUsersHints] = useHint();\r\n\r\n  const fetchUsersData = async () => {\r\n    const response = await axios.get(\r\n      `${config.baseUrl}/${config.userDataPath}`\r\n    );\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const data = await fetchUsersData();\r\n    setUsersData(data);\r\n  }, []);\r\n\r\n  const createHintList = (e) => {\r\n    const enteredText = e.target.value;\r\n\r\n    setUsersHints(enteredText, usersData, selectedUsers);\r\n    setHintsDisplay(true);\r\n  };\r\n\r\n  /**\r\n   * Change event handler to handle any change in search field\r\n   * @param {*} e\r\n   */\r\n  const changeHandler = debounce((e) => createHintList(e), 200);\r\n\r\n  /**\r\n   * Click handler triggered by selecting user from auto complete hints\r\n   * @param {*} user\r\n   */\r\n  const hintClickHandler = (user) => {\r\n    const users = [...selectedUsers, user];\r\n    setSelectedUsers(users);\r\n    setHintsDisplay(false);\r\n    inputRef.current.value = \"\";\r\n  };\r\n\r\n  /**\r\n   * Remove User from selected users on click of pill cross icon\r\n   */\r\n  const removeFromListHandler = useCallback(\r\n    (user) => {\r\n      const newSelectedUsers = selectedUsers.filter(\r\n        (selectedUser) => selectedUser.guid !== user.guid\r\n      );\r\n      setSelectedUsers(newSelectedUsers);\r\n    },\r\n    [selectedUsers]\r\n  );\r\n\r\n  return (\r\n    <main>\r\n      <form className=\"form-inline\">\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          name=\"\"\r\n          placeholder=\"Search Users\"\r\n          id=\"\"\r\n          onChange={changeHandler}\r\n          ref={inputRef}\r\n        />\r\n      </form>\r\n      {usersHints.length > 0 && hintsDispay && (\r\n        <AutoCompleteList\r\n          usersHints={usersHints}\r\n          onClickHint={hintClickHandler}\r\n        ></AutoCompleteList>\r\n      )}\r\n\r\n      {selectedUsers.length > 0 && (\r\n        <Pills\r\n          selectedUsers={selectedUsers}\r\n          onClickSelectedUser={removeFromListHandler}\r\n        ></Pills>\r\n      )}\r\n      {selectedUsers.length > 0 && (\r\n        <UsersList selectedUsers={selectedUsers}></UsersList>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}